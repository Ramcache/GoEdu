syntax = "proto3";

package GoEdu;

import "google/api/annotations.proto";

option go_package = "./proto;proto";

// Сервис для управления курсами в системе образования.
service EducationService {
  // Получить список всех курсов.
  rpc GetCourses (Empty) returns (CourseList) {
    option (google.api.http) = {
      get: "/v1/courses"
    };
  }

  // Получить информацию о курсе по ID.
  rpc GetCourseByID (CourseIDRequest) returns (Course) {
    option (google.api.http) = {
      get: "/v1/courses/{course_id}"
    };
  }

  // Создать новый курс.
  rpc CreateCourse (NewCourseRequest) returns (Course) {
    option (google.api.http) = {
      post: "/v1/courses"
      body: "*"
    };
  }

  // Обновить существующий курс.
  rpc UpdateCourse (UpdateCourseRequest) returns (Course) {
    option (google.api.http) = {
      put: "/v1/courses/{id}"
      body: "*"
    };
  }

  // Удалить курс по ID.
  rpc DeleteCourse (CourseIDRequest) returns (Empty) {
    option (google.api.http) = {
      delete: "/v1/courses/{course_id}"
    };
  }

  // Поиск курсов по ключевому слову.
  rpc SearchCourses (SearchRequest) returns (CourseList) {
    option (google.api.http) = {
      get: "/v1/courses/search"
    };
  }
}

// Сервис для управления студентами.
service StudentService {
  // Регистрация нового студента.
  rpc RegisterStudent (RegisterStudentRequest) returns (Student) {
    option (google.api.http) = {
      post: "/v1/students/register"
      body: "*"
    };
  }

  // Авторизация студента.
  rpc LoginStudent (LoginRequest) returns (AuthResponse) {
    option (google.api.http) = {
      post: "/v1/students/login"
      body: "*"
    };
  }

  // Получить профиль студента по ID.
  rpc GetStudentProfile (StudentIDRequest) returns (Student) {
    option (google.api.http) = {
      get: "/v1/students/{id}"
    };
  }

  // Обновить профиль студента.
  rpc UpdateStudentProfile (UpdateStudentRequest) returns (Student) {
    option (google.api.http) = {
      put: "/v1/students/{id}"
      body: "*"
    };
  }
}

// Сервис для управления записями на курсы.
service EnrollmentService {
  // Записать студента на курс.
  rpc EnrollStudent (EnrollmentRequest) returns (Empty) {
    option (google.api.http) = {
      post: "/v1/enrollments"
      body: "*"
    };
  }

  // Получить список студентов, записанных на курс.
  rpc GetStudentsByCourse (CourseIDRequest) returns (StudentList) {
    option (google.api.http) = {
      get: "/v1/courses/{course_id}/students"
    };
  }

  // Получить список курсов, на которые записан студент.
  rpc GetCoursesByStudent (StudentIDRequest) returns (CourseList) {
    option (google.api.http) = {
      get: "/v1/students/{id}/courses"
    };
  }

  // Отписать студента от курса.
  rpc UnEnrollStudent (UnEnrollRequest) returns (Empty) {
    option (google.api.http) = {
      delete: "/v1/enrollments/{student_id}/{course_id}"
    };
  }
}

// Сервис для управления лекциями в курсах.
service LectureService {
  // Добавить лекцию в курс.
  rpc AddLectureToCourse (LectureRequest) returns (Lecture) {
    option (google.api.http) = {
      post: "/v1/courses/{course_id}/lectures"
      body: "*"
    };
  }

  // Получить список лекций по ID курса.
  rpc GetLecturesByCourse (CourseIDRequest) returns (LectureList) {
    option (google.api.http) = {
      get: "/v1/courses/{course_id}/lectures"
    };
  }

  // Получить содержание лекции по ID.
  rpc GetLectureContent (LectureIDRequest) returns (LectureContent) {
    option (google.api.http) = {
      get: "/v1/lectures/{lecture_id}/content"
    };
  }

  // Обновить лекцию.
  rpc UpdateLecture (UpdateLectureRequest) returns (Lecture) {
    option (google.api.http) = {
      put: "/v1/lectures/{id}"
      body: "*"
    };
  }

  // Удалить лекцию по ID.
  rpc DeleteLecture (LectureIDRequest) returns (Empty) {
    option (google.api.http) = {
      delete: "/v1/lectures/{lecture_id}"
    };
  }

  // Отметить лекцию как завершенную.
  rpc MarkLectureAsCompleted (LectureCompletionRequest) returns (Empty) {
    option (google.api.http) = {
      post: "/v1/lectures/{lecture_id}/complete"
      body: "*"
    };
  }

  // Получить прогресс по курсу для студента.
  rpc GetCourseProgress (CourseProgressRequest) returns (CourseProgress) {
    option (google.api.http) = {
      get: "/v1/courses/{course_id}/progress"
    };
  }

  // Получить рекомендованные курсы для студента.
  rpc GetRecommendedCourses (StudentIDRequest) returns (CourseList) {
    option (google.api.http) = {
      get: "/v1/students/{id}/recommendations"
    };
  }
}

// Сервис для управления преподавателями.
service InstructorService {

  // Получение преподавателя по ID
  rpc GetInstructorByID(GetInstructorRequest) returns (Instructor) {
    option (google.api.http) = {
      get: "/v1/instructors/{id}"
    };
  }

  // Обновление данных преподавателя
  rpc UpdateInstructor(UpdateInstructorRequest) returns (Instructor) {
    option (google.api.http) = {
      patch: "/v1/instructors/{id}"
      body: "*"
    };
  }
  // Регистрация нового преподавателя.
  rpc RegisterInstructor (RegisterInstructorRequest) returns (Instructor) {
    option (google.api.http) = {
      post: "/v1/instructors/register"
      body: "*"
    };
  }
  rpc LoginInstructor (LoginRequest) returns (AuthResponse) {
    option (google.api.http) = {
      post: "/v1/instructors/login"
      body: "*"
    };
  }

  // Получить список курсов преподавателя по ID.
  rpc GetCoursesByInstructor (InstructorIDRequest) returns (CourseList) {
    option (google.api.http) = {
      get: "/v1/instructors/{instructor_id}/courses"
    };
  }
}

// Сервис для управления отзывами к курсам.
service ReviewService {
  // Добавить отзыв к курсу.
  rpc AddReviewToCourse (ReviewRequest) returns (Empty) {
    option (google.api.http) = {
      post: "/v1/courses/{course_id}/reviews"
      body: "*"
    };
  }

  // Получить список отзывов к курсу по ID.
  rpc GetReviewsByCourse (CourseIDRequest) returns (ReviewList) {
    option (google.api.http) = {
      get: "/v1/courses/{course_id}/reviews"
    };
  }
}

// Сервис для проверки работоспособности сервера.
service HealthService {
  // Проверка состояния сервера.
  rpc Check (Empty) returns (HealthCheckResponse) {
    option (google.api.http) = {
      get: "/health"
    };
  }
}

// Сообщение для пустых ответов.
message Empty {}

// Запрос для удаления записи студента с курса.
message UnEnrollRequest {
  int64 student_id = 1; // ID студента.
  int64 course_id = 2; // ID курса.
}

// Ответ для проверки состояния сервера.
message HealthCheckResponse {
  bool status = 1; // true, если сервер работает.
}

// Сообщения, связанные с курсами.
message Course {
  int64 id = 1; // ID курса.
  string name = 2; // Название курса.
  string description = 3; // Описание курса.
  int64 instructor_id = 4; // ID преподавателя.
}

message CourseList {
  repeated Course courses = 1; // Список курсов.
}

message CourseIDRequest {
  int64 course_id = 1; // ID курса.
}

message NewCourseRequest {
  string name = 1; // Название нового курса.
  string description = 2; // Описание нового курса.
  int64 instructor_id = 3; // ID преподавателя.
}

message UpdateCourseRequest {
  int64 id = 1; // ID курса для обновления.
  string name = 2; // Новое название курса.
  string description = 3; // Новое описание курса.
}

// Сообщения, связанные с регистрацией студентов.
message RegisterStudentRequest {
  string name = 1; // Имя студента.
  string email = 2; // Email студента.
  string password = 3; // Пароль студента.
}

message Student {
  int64 id = 1; // ID студента.
  string name = 2; // Имя студента.
  string email = 3; // Email студента.
  string token = 4; // Токен авторизации студента.
}

message LoginRequest {
  string email = 1; // Email для входа.
  string password = 2; // Пароль для входа.
}

message AuthResponse {
  int64 id = 1; // ID.
  string name = 2; // Имя.
  string email = 3; // Email.
  string token = 4; // Токен авторизации.
}

message StudentIDRequest {
  int64 id = 1; // ID студента.
}

message UpdateStudentRequest {
  int64 id = 1; // ID студента для обновления.
  string name = 2; // Новое имя студента.
  string email = 3; // Новый email студента.
  string password = 4; // Новый пароль студента.
}

// Сообщения для управления записями.
message EnrollmentRequest {
  int64 student_id = 1; // ID студента.
  int64 course_id = 2; // ID курса.
}

message StudentList {
  repeated Student students = 1; // Список студентов.
}

// Сообщения для управления лекциями.
message LectureRequest {
  int64 course_id = 1; // ID курса, к которому относится лекция.
  string title = 2; // Название лекции.
  string content = 3; // Содержание лекции.
}

message Lecture {
  int64 id = 1; // ID лекции.
  int64 course_id = 2; // ID курса.
  string title = 3; // Название лекции.
  string content = 4; // Содержание лекции.
}

message LectureList {
  repeated Lecture lectures = 1; // Список лекций.
}

message LectureIDRequest {
  int64 lecture_id = 1; // ID лекции.
}

message LectureContent {
  int64 id = 1; // ID лекции.
  int64 course_id = 2; // ID курса.
  string title = 3; // Название лекции.
  string content = 4; // Содержание лекции.
}

message UpdateLectureRequest {
  int64 id = 1; // ID лекции для обновления.
  string title = 2; // Новое название лекции.
  string content = 3; // Новое содержание лекции.
}

message LectureCompletionRequest {
  int64 student_id = 1; // ID студента.
  int64 lecture_id = 2; // ID лекции.
}

message CourseProgressRequest {
  int64 student_id = 1; // ID студента.
  int64 course_id = 2; // ID курса.
}

message CourseProgress {
  int64 course_id = 1; // ID курса.
  int64 student_id = 2; // ID студента.
  int32 completed_percent = 3; // Процент завершения курса.
}

// Сообщения для регистрации преподавателей.
message RegisterInstructorRequest {
  string name = 1; // Имя преподавателя.
  string email = 2; // Email преподавателя.
  string password = 3; // Пароль преподавателя.
}

message Instructor {
  int64 id = 1; // ID преподавателя.
  string name = 2; // Имя преподавателя.
  string email = 3; // Email преподавателя.
  string token = 4; // Токен авторизации преподавателя.
}

message InstructorIDRequest {
  int64 instructor_id = 1; // ID преподавателя.
}

// Сообщения для управления отзывами.
message ReviewRequest {
  int64 student_id = 1; // ID студента.
  int64 course_id = 2; // ID курса.
  string comment = 3; // Текст отзыва.
  int32 rating = 4; // Оценка (рейтинг).
}

message Review {
  int64 id = 1; // ID отзыва.
  int64 student_id = 2; // ID студента.
  int64 course_id = 3; // ID курса.
  string comment = 4; // Текст отзыва.
  int32 rating = 5; // Оценка.
  string created_at = 6; // Дата создания отзыва.
}

message ReviewList {
  repeated Review reviews = 1; // Список отзывов.
}

// Сообщения для поиска.
message SearchRequest {
  string keyword = 1; // Ключевое слово для поиска.
}

// Сообщения для управления преподавателями.
message UpdateInstructorRequest {
  int64 id = 1;                // ID преподавателя
  string name = 2;              // Новое имя (опционально)
  string email = 3;             // Новый email (опционально)
  string current_password = 4;  // Текущий пароль (для проверки при изменении пароля)
  string new_password = 5;      // Новый пароль (опционально)
}

// Запрос для удаления преподавателя
message DeleteInstructorRequest {
  int64 id = 1;
}

// Запрос для получения преподавателя
message GetInstructorRequest {
  int64 id = 1;
}